{"version":3,"file":"component---src-pages-mind-the-gap-js.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/quizz.jsx","webpack://gatsby-starter-default/./src/pages/mindTheGap.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Quizz = ({ questions, answers }) => {\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const  [result, setResult] = useState([]);\n\n  const handleAnswerChange = (index, event) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[index] = event.target.value;\n    setSelectedAnswers(newSelectedAnswers);\n  };\n\n  const handleSubmit = () => {\n    console.log('selected answers: ', selectedAnswers);\n    const temp = answers.map((a, index) => index === +selectedAnswers[index])\n    console.log('result temp: ', temp);\n    setResult(temp)\n  };\n\n  return (\n    <div>\n      {questions.map((question, index) => (\n        <div key={index}>\n          <span>{question}</span>\n          <select value={selectedAnswers[index] || ''} onChange={(event) => handleAnswerChange(index, event)}>\n            <option value=\"\">Select an answer</option>\n            {answers.map((answer, answerIndex) => (\n              <option key={answerIndex} value={answerIndex}>{answer}</option>\n            ))}\n          </select>\n          {result[index] ? (<span>OK</span>) : (<span>INCORRECT</span>)}\n          <br/>\n          <br/>\n          <br/>\n        </div>\n      ))}\n      <button onClick={handleSubmit}>Submit</button>\n      {result.every(r => r) && \"--w√ºnderful--\"}\n    </div>\n  );\n};\n\nexport default Quizz;\n","//require('dotenv').config();\nimport React, { useState, useEffect } from 'react'\nimport Quizz from '../components/quizz';\n\nconst MindTheGap = () => {\n  const [task, setTask] = useState('');\n  const [res, setRes] = useState('');\n  const [l, setL] = useState(false);\n\n  useEffect(() => {\n    console.log('incoming res: ',);\n    const input = res.data?.trim();\n    let temp;\n    if (input) {\n      temp = input\n        .split('QUESTION:')\n        .map(fullTask => fullTask\n          .split('ANSWER:')\n          .map(separatedTaskPart => separatedTaskPart\n            .trim()\n            .replace(/\\n/g, \"\")))\n        .filter(arr => arr.length === 2)\n        .reduce((acc, task) => {\n          acc.questions.push(task[0]);\n          acc.answers.push(task[1]);\n          return acc;\n        }, {\n          questions: [], answers: [],\n        });\n    }\n    console.log('separated res: ', temp);\n    setTask(temp);\n  }, [res])\n\n\n  const prompt = `You are an English teacher, I am a student. I want to reach the C1 level of English, and I need to practice. Create a fill-the-blank space exercise for English learners to practice level C1 English sentences. Like this: QUESTION: Taking on new challenges can ___ your motivation., ANSWER: boost.\n  Create 10 sentences about a generic topic with C1 level of English. This is a mind-the-gap exercise. Start every sentence with this string: \"QUESTION:\"`;\n\n  const callOpenAI = async () => {\n    const { Configuration, OpenAIApi } = require(\"openai\");\n    const configuration = new Configuration({\n      apiKey: process.env.OAI,\n    });\n\n    const openai = new OpenAIApi(configuration);\n    let response;\n    setL(true)\n    try {\n      response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: prompt,\n        max_tokens: 1000,\n        temperature: 1,\n      });\n    } catch (err) {\n      console.log('error in api call:', err.message || err)\n    }\n    const r = { data: response.data.choices[0].text };\n    // const stringed = JSON.stringify(r);\n    console.log('response::::', r);\n    setRes(r);\n    setL(false)\n  };\n\n  return (\n    <div>\n      {l && (<div>loading</div>)}\n      <button onClick={callOpenAI}>Invoke OpenAI API</button>\n      <div>\n        {task?.answers && (\n          <Quizz questions={task.questions} answers={task.answers} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MindTheGap"],"names":["React","useState","Quizz","questions","answers","selectedAnswers","setSelectedAnswers","result","setResult","handleAnswerChange","index","event","newSelectedAnswers","target","value","handleSubmit","console","log","temp","map","a","question","answer","answerIndex","every","r","useEffect","MindTheGap","task","setTask","res","setRes","l","setL","input","data","trim","split","fullTask","separatedTaskPart","replace","filter","arr","length","reduce","acc","push","prompt","callOpenAI","Configuration","OpenAIApi","require","configuration","apiKey","process","env","OAI","openai","response","createCompletion","model","max_tokens","temperature","err","message","choices","text"],"sourceRoot":""}